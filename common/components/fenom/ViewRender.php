<?php
namespace common\components\fenom;
//namespace yii\renderers;

use Yii;
use yii\base\Exception;
use yii\base\Theme;
use yii\base\View;
use yii\base\Controller;
use yii\base\ViewRenderer as BaseViewRenderer;
use yii\helpers\Html;

use Fenom;

/**
* Fenom view renderer
*
* @author     Ivan Shalganov <a.cobest@gmail.com>
* @author     Slava Rudnev (RSol) <slava.rudnev@gmail.com>
* @link https://github.com/bzick/fenom
* @link
*
* @version 0.0.1
*/
class ViewRender extends BaseViewRenderer
{

	/**
	 * Base dir for templates
	 * @var string
	 */
	public $templatesDir;

	/**
	 * Dir for store complited templates
	 * @var string
	 */
	public $compiledDir;

    public $cachePath = '@runtime/Fenom/cache';

    /**
	 * Settings
	 * <ul>
	 * <li>disable_methods, Fenom::DENY_METHODS, ????????? ????? ??????? ? ????????</li>
	 * <li>disable_native_funcs, Fenom::DENY_INLINE_FUNCS, ????????? ????????????? PHP ???????, ????? ???????????</li>
	 * <li>auto_reload, Fenom::AUTO_RELOAD, ???????????? ?????? ???? ??? ???????? ??? ??????? (????????? ?????? ?????????????).</li>
	 * <li>force_compile, Fenom::FORCE_COMPILE, ???????????? ?????? ??? ?????? ?????? (?????? ????????? ?????? ?????????????).</li>
	 * <li>force_include, Fenom::FORCE_INCLUDE, ?????????????? ??????? ??????? ? ??????. ??? ???????? ?????????????????? ? ?????? ?????????? ???????. ????? ???????????? ???? ??? ??????? ?????? ???? ? ????????.</li>
	 * <li>auto_escape, Fenom::AUTO_ESCAPE, ??? ????????? ?????????? ? ?????????? ??????? ????? ??????????????</li>
	 * </ul>
	 * @var array|bitmap
	 */
	public $options;

	/**
	* @var string Fenom template files extension
	*/
    public $fileExtension = '.tpl';

	/**
	 * Fenom
	 * @var Fenom
	 */
	private $_fenom;

	/**
	 * Base path length
	 * @var int
	 */
	private $_basePathLength;

	public function init()
	{
		if (!$this->compiledDir)
		{
			$this->compiledDir = Yii::getAlias($this->cachePath);
		}

		if(!is_dir($this->compiledDir))
		{
			mkdir($this->compiledDir, 0777, true);
		}

		if (!$this->options)
		{
			$this->options = Fenom::AUTO_RELOAD;
		}

		$this->_fenom = Fenom::factory($this->templatesDir, $this->compiledDir, $this->options);
		parent::init();
	}

	/**
	 * Renders a view file.
	 * This method is required by {@link IViewRenderer}.
     *
     * @param View $view the view object used for rendering the file.
     * @param string $file the view file.
     * @param array $params the parameters to be passed to the view file.
     * @return string the rendering result
     */
	public function render($view, $file, $params=array())
	{
		// current controller properties will be accessible as {{ this.property }}
        $params['this'] = $view;

        return $this->_fenom->fetch($file, $params);
	}

	public function __call($name, $arguments)
	{
		if(method_exists($this->_fenom, $name))
		{
			return call_user_func(array($this->_fenom), $arguments);
		}
		throw new Exception(Yii::t('ext.RFenomViewRender', 'Method {method} not found', array(
			'method'=>$name,
		)));
	}

}
